global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

priority 2



# BEGIN SUPERSCRIPTS AND SUBSCRIPTS
# ------------------------------------------------ #
context "math()"
snippet "([\w]|[\}\)\]\|'])'" "Superscript" rA
`!p snip.rv = match.group(1)`^{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([a-zA-Z]|[\}\)\]\|']);" "Subscript" rA
`!p snip.rv = match.group(1)`_{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([a-zA-Z]|[\}\)\]\|'])__" "Subscript and superscript" rA
`!p snip.rv = match.group(1)`_{${1:${VISUAL:}}}^{$2}$0
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])sd" "Text subscript" rA
`!p snip.rv = match.group(1)`_{\mathrm{${1:${VISUAL:}}}}$0
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])"([\w]{1})" "Place the first \w character after the quotation mark in a subscript" rA
`!p snip.rv = match.group(1) + "^{" + match.group(2) + "}"`
endsnippet

#context "math()"
#snippet "([\w]|[\}\)\]\|']):([\w]{1})" "Place the first \w character after the : in a subscript" rA
#`!p snip.rv = match.group(1) + "_{" + match.group(2) + "}"`
#endsnippet

snippet "([a-zA-Z]|[\}\)\]\|'])00" "Automatic 0 subscript" rA
`!p snip.rv = match.group(1)`_{0}
endsnippet

context "math()"
snippet JJ "j subscript (because snippet move forward key is jk)" iA
_{j}
endsnippet

context "math()"
snippet "([^a-zA-Z])ee" "e^{} supercript" rA
`!p snip.rv = match.group(1)`e^{${1:${VISUAL:}}} $0
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])([-+]{2})" "Automatic +/- subscript" rA
`!p snip.rv = match.group(1) + "_{" + match.group(2)[0] + "}"`
endsnippet

snippet "([\w]|[\}\)\]\|'])\*\*" "Automatic * superscript" rA
`!p snip.rv = match.group(1)`^{*}
endsnippet

snippet "([\w]|[\}\)\]\|'])TT" "Automatic transposed superscript" rA
`!p snip.rv = match.group(1)`^{\top}
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])CC" "Automatic complement superscript" rA
`!p snip.rv = match.group(1)`^{\complement}
endsnippet

# ----------------------------------------- #
# END SUPERSCRIPTS AND SUBSCRIPTS


# BEGIN SEMANTIC COMMANDS (vec, tilde, etc...)
# --------------------------------------------- #

snippet "(^|[^a-zA-Z])ff" "\frac{}{}" rA
`!p snip.rv = match.group(1)`\frac{${1:${VISUAL:}}}{$2}$0
endsnippet

snippet "([^a-zA-Z\\])pV" "\pdv{}" rA
`!p snip.rv = match.group(1)`\pdv{${1:${VISUAL:}}} $0
endsnippet

snippet "([^a-zA-Z\\])pvv" "\pdv{}{}" rA
`!p snip.rv = match.group(1)`\pdv{$1}{$2} $0
endsnippet

snippet "([^a-zA-Z\\])ppv" "\pdvN{}{}{}" rA
`!p snip.rv = match.group(1)`\pdvN{$1}{$2}{$3} $0
endsnippet

snippet "([^a-zA-Z\\])pv3" "\pdvThree{}{}" rA
`!p snip.rv = match.group(1)`\pdvThree{$1}{$2}{$3} $0
endsnippet

snippet "([^a-zA-Z\\])dV" "\dvOne{}" rA
`!p snip.rv = match.group(1)`\dv{${1:${VISUAL:}}} $0
endsnippet
 
snippet "([^a-zA-Z\\])([dD])vv" "\dv{}{} or \Dv{}{}" rA
`!p snip.rv = match.group(1)`\\`!p snip.rv = match.group(2)`v{$1}{$2} $0
endsnippet

snippet "([^a-zA-Z\\])ddv" "\dvN[]{}{}" rA
`!p snip.rv = match.group(1)`\dvN[$1]{$2}{$3} $0
endsnippet

snippet "([\W_])wt" "\widetilde" rA
`!p snip.rv = match.group(1)`\widetilde{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_\\])hh" "\hat" rA
`!p snip.rv = match.group(1)`\hat{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_\\])bb" "\bar" rA
`!p snip.rv = match.group(1)`\bar{${1:${VISUAL:}}}$0
endsnippet

snippet "([\W_])tn" "\tensor{}" rA
`!p snip.rv = match.group(1)`\tensor{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([^a-zA-Z\\])nrr" "Norm" rA
`!p snip.rv = match.group(1)`\norm{${1:${VISUAL:}}}$0
endsnippet

# ----------------------------------------- #
# END SEMANTIC COMMANDS 


# BEGIN STATIC MATH SNIPPETS
# --------------------------------------------- #

context "math()"
snippet "([^a-zA-Z0-9\\])dd" "\diff" rA
`!p snip.rv = match.group(1)`\dd{${1:${VISUAL:}}}$0
endsnippet


